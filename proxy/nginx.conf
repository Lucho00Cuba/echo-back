user root;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    add_header 'X-Balancer' $hostname always;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$upstream_response_time';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;

    server {
        listen 80;
        listen 443 ssl;

        server_name api.example.io;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        # ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;

        location / {
            set $status_code 200; # 200
            set $user_content_type "text/html";
            if ($request_uri ~ /html-code/(\d+)$) {
                set $status_code $1; # 400
            }

            if ($request_uri ~ /json-code/(\d+)$) {
                set $status_code $1; # 400
                set $user_content_type "application/json";
            }

            proxy_set_header Accept $user_content_type;
            proxy_set_header X-Code $status_code;
            proxy_set_header X-Client-Addr $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forward-Balancer $hostname;
            proxy_set_header X-Forward-Scheme $scheme;
            proxy_set_header X-Forward-Host $host;

            proxy_read_timeout 1s;
            proxy_connect_timeout 1s;
            proxy_send_timeout 1s;

            proxy_pass http://default:3000;
            proxy_intercept_errors on;
        }

        location /payment-status {
            return 402;
        }

        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 @custom-errors;
        location @custom-errors {
            proxy_set_header Host $host;
            proxy_set_header Accept $user_content_type;
            proxy_set_header X-Code $status;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header X-Balancer $hostname;
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header X-Client-Addr $remote_addr;
            proxy_set_header X-Namespace "default";
            proxy_set_header X-Ingress-Name "api";
            proxy_set_header X-Service-Name "api";
            proxy_set_header X-Service-Port "3000";

            proxy_pass http://default:3000;
        }
    }
}